worker_processes 2;

events {
    worker_connections 1024;
}

http {
    log_format upstream_time '$remote_addr - [$time_local] '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" '
                             'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';
    access_log /dev/stdout upstream_time;

    lua_package_path "$prefix/lualib/?.lua;;";

    server {
        listen 80 default_server;
        location / {
            resolver 8.8.8.8;  # use Google's open DNS server for an example

            content_by_lua '

              -- For simple singleshot requests, use the URI interface.
              local http = require "resty.http"
              local httpc = http.new()
              local res, err = httpc:request_uri("http://172.17.0.1:5000/?username=abcd", {
                method = "GET"
              })

              if not res then
                ngx.say("failed to request: ", err)
                return
              end

              -- In this simple form, there is no manual connection step, so the body is read
              -- all in one go, including any trailers, and the connection closed or keptalive
              -- for you.

              ngx.status = res.status

              for k,v in pairs(res.headers) do
                  --
              end

              ngx.say(res.body)
            ';
          }
        }
}
