@article{gonzalez-martinez_cloud_2015,
	title = {Cloud computing and education: {A} state-of-the-art survey},
	volume = {80},
	issn = {03601315},
	shorttitle = {Cloud computing and education},
	url = {http://linkinghub.elsevier.com/retrieve/pii/S0360131514001985},
	doi = {10.1016/j.compedu.2014.08.017},
	language = {en},
	urldate = {2017-02-24},
	journal = {Computers \& Education},
	author = {Gonzalez-Martinez, Jose A. and Bote-Lorenzo, Miguel L. and Gomez-Sanchez, Eduardo and Cano-Parra, Rafael},
	month = jan,
	year = {2015},
	pages = {132--151}
}
@online{codeanywhere,
	title = {Codeanywhere Cross Platform Cloud IDE},
	url = {https://codeanywhere.com/},
	abstract = {Codeanywhere is a complete toolset for web development. Enabling you to edit, collaborate and run your projects from any device.},
	urldate = {2017-02-26},
	journal = {Codeanywhere}
}
@inproceedings{ruan_performance_2016,
	title = {A {Performance} {Study} of {Containers} in {Cloud} {Environment}},
	url = {https://link.springer.com/chapter/10.1007/978-3-319-49178-3_27},
	abstract = {Container technology has gained great popularity since containers could provide near-native performance in cloud environment. According to different design purposes and underlying implementations, containers could be classified into application containers (e.g., Docker) and system containers (e.g., LXC). The diversity of containers may lead to a confusing choice about which kind of container is suitable for different usage scenarios. Meanwhile, the architectures of public container services are quite controversial because cloud platforms tend to run containers in virtual machines. From the perspective of performance, an extra virtual machine layer between the bare metal and containers probably brings in unnecessary performance overhead. In this paper, we carry out a performance study to explore the appropriate way to use containers from different perspectives. We first conduct a series of experiments to measure performance differences between application containers and system containers, then evaluate the overhead of extra virtual machine layer between the bare metal and containers, and finally inspect the service quality of ECS (Amazon EC2 Container Service) and GKE (Google Container Engine). Our results show that system containers are more suitable to sustain I/O-bound workload than application containers, because application containers will suffer high I/O latency due to layered filesystem. Running containers in virtual machine would result in severe disk I/O performance degradation up to 42.7 \% and network latency up to 233 \%. We also find out ECS offers better performance than GKE, and cloud platforms could acquire better performance by running containers directly on the bare metal.},
	language = {en},
	urldate = {2017-02-27},
	booktitle = {Advances in {Services} {Computing}},
	publisher = {Springer, Cham},
	author = {Ruan, Bowen and Huang, Hang and Wu, Song and Jin, Hai},
	month = nov,
	year = {2016},
	note = {DOI: 10.1007/978-3-319-49178-3\_27},
	pages = {343--356},
	file = {APSCC16(Ruan).pdf:/home/shahidh/.zotero/zotero/3f7i83sm.default/zotero/storage/2R6HJHG3/APSCC16(Ruan).pdf:application/pdf;Snapshot:/home/shahidh/.zotero/zotero/3f7i83sm.default/zotero/storage/FWK7EADC/978-3-319-49178-3_27.html:text/html}
}
@online{google_trends_docker_lxc_rkt,
	title = {Google Trends for docker, rkt, lxc - Worldwide, Past 5 years},
	url = {https://trends.google.com/trends/explore/TIMESERIES?q=docker,rkt,lxc&hl=en-US&sni=3},
	abstract = {See the latest trends, data and visualizations from Google. Find out what's trending near you right now.},
	titleaddon = {Google Trends},
	urldate = {2017-02-27}
}
@online{github_stars_comparison,
	title = {{GitHub} star history for Kubernetes, Docker Swarm, Cloud Foundry Diego \& Mesosphere Marathon},
	url = {http://www.timqian.com/star-history/#kubernetes/kubernetes&docker/swarm&cloudfoundry/diego-release&mesosphere/marathon},
	urldate = {2017-02-27}
}
@online{google_trends_kubernetes_docker_swarm,
	title = {Google Trends for kubernetes, docker swarm, mesosphere marathon, cloud foundry diego - Worldwide, 1/2/13 - 2/27/17},
	url = {https://g.co/trends/s0aOm},
	abstract = {Explore search interest by time, location and popularity on Google Trends},
	titleaddon = {Google Trends},
	urldate = {2017-02-27}
}
@article{dragoni_microservices:_2016,
	title = {Microservices: yesterday, today, and tomorrow},
	shorttitle = {Microservices},
	url = {http://arxiv.org/abs/1606.04036},
	abstract = {Microservices is an architectural style inspired by service-oriented computing that has recently started gaining popularity. Before presenting the current state-of-the-art in the field, this chapter reviews the history of software architecture, the reasons that led to the diffusion of objects and services first, and microservices later. Finally, open problems and future challenges are introduced. This survey primarily addresses newcomers to the discipline, while offering an academic viewpoint on the topic. In addition, we investigate some practical issues and point out some potential solutions.},
	urldate = {2017-02-28},
	journal = {arXiv:1606.04036 [cs]},
	author = {Dragoni, Nicola and Giallorenzo, Saverio and Lafuente, Alberto Lluch and Mazzara, Manuel and Montesi, Fabrizio and Mustafin, Ruslan and Safina, Larisa},
	month = jun,
	year = {2016},
	note = {arXiv: 1606.04036},
	keywords = {Computer Science - Software Engineering}
}